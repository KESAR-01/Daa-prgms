#include <stdio.h>

#define MAX_ITEMS 100 // Define maximum number of items
#define MAX_CAPACITY 100// Define maximum capacity for the knapsack

int max(int a, int b)
{
    return (a > b) ? a : b;
}

int knapSack(int W, int weight[], int value[], int n) {
    // Create a 2D array to store the maximum value at each n and W
    int m[MAX_ITEMS + 1][MAX_CAPACITY + 1],i,w;

    // Build the m[][] table in a bottom-up manner
    for ( i = 0; i <= n; i++)
    {
   for ( w = 0; w <= W; w++)
	{
	    if (i == 0 || w == 0)
	    {
		m[i][w] = 0; //  no item or no capacity
	    }
	    else if (weight[i - 1] <= w)
	    {
		m[i][w] = max(value[i - 1] + m[i - 1][w - weight[i - 1]], m[i - 1][w]);
	    }
	    else
	    {
		m[i][w] = m[i - 1][w]; // Item cannot be included
	    }
	}
    }

    return m[n][W]; // Maximum value that can be obtained
}

int main()
 {
    int n,i,W;
   int weight[MAX_ITEMS], value[MAX_ITEMS];
    printf("Enter number of items (max %d): ", MAX_ITEMS);
    scanf("%d", &n);

    if (n > MAX_ITEMS)
     {
	printf("Number of items exceeds maximum limit.\n");
	return 1;
     }
    printf("Enter weights and values:\n");
    for ( i = 0; i < n; i++)
     {
	printf("Item %d - Weight: ", i + 1);
	scanf("%d", &weight[i]);
	printf("Item %d - Value: ", i + 1);
	scanf("%d", &value[i]);
    }

    printf("Enter capacity of knapsack (max %d): ", MAX_CAPACITY);
    scanf("%d", &W);

    if (W > MAX_CAPACITY)
    {
	printf("Capacity exceeds maximum limit.\n");
	return 1;
    }

    printf("Maximum value in a 0/1 Knapsack: %d\n", knapSack(W, weight, value, n));

    return 0;
}