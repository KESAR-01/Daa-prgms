#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 100  // Maximum number of vertices
  int totalWeight = 0;
// Function to find the vertex with the minimum key value
int minKey(int key[], int mstSet[], int V)
{
    int min = INT_MAX, min_index;
    int v;
	 // int totalWeight = 0;
    for ( v = 0; v < V; v++)
    {
	if (mstSet[v] == 0 && key[v] < min)
	{
	    min = key[v];
	    min_index = v;
	}
    }
    return min_index;
}

// Function to implement Prim's algorithm
void primMST(int graph[MAX_VERTICES][MAX_VERTICES], int V, int s)
{
    int parent[MAX_VERTICES];  // Array to store constructed MST
    int key[MAX_VERTICES];     // Key values used to pick minimum weight edge
    int mstSet[MAX_VERTICES];
    int i,count,v;
    key[s]=0;  // To represent the set of vertices included in MST

//int totalWeight = 0;


    // Initialize all keys as INFINITE and mstSet[] as false
    for (i = 0; i < V; i++)
    {
	key[i] = INT_MAX;
	mstSet[i] = 0;
	parent[i] = -1; // Initialize parent array
    }

    // Always include the source vertex in MST
    key[s] = 0;     // Make key 0 so that this vertex is picked as first
    // The MST will have V vertices
    for (count = 0; count < V - 1; count++)
    {
	// Pick the minimum key vertex from the set of vertices not yet included in MST
	int u = minKey(key, mstSet, V);

	 // int totalWeight = 0;
	// Add the picked vertex to the MST Set
	mstSet[u] = 1;
	// Update key value and parent index of the adjacent vertices of the picked vertex.
	for (v = 0; v < V; v++)
	{
	    // Update key only if graph[u][v] is smaller than key[v]
	    if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
	    {
		parent[v] = u;
		key[v] = graph[u][v];
	    }
	}
    }

    // Print the constructed MST and calculate total weight

//    int totalWeight = 0;

    printf("Edge \tWeight\n");
    for (i = 1; i < V; i++)
    { // Start from 1 since parent[0] is -1
	if (parent[i] != -1)
	{ // Exclude source node from output
	    printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
	    totalWeight += graph[i][parent[i]]; // Accumulate total weight
	}
    }

    printf("Total weight of MST: %d\n", totalWeight);
}

int main() {
    int V, s,i,j;
    int graph[MAX_VERTICES][MAX_VERTICES];
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    if (V > MAX_VERTICES)
     {
	printf("Number of vertices exceeds maximum limit (%d).\n", MAX_VERTICES);
	return 1;
    }



    printf("Enter the adjacency matrix:\n");

    for ( i = 0; i < V; i++) {
	for (j = 0; j < V; j++) {
	    scanf("%d", &graph[i][j]);
	}
    }

    printf("Enter the source vertex (0 to %d): ", V-1);
    scanf("%d", &s);

    if (s < 0 || s >= V) {
	printf("Invalid source vertex.\n");
	return 1;
    }

    primMST(graph, V, s);

    return 0;
}