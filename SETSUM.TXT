#include <stdio.h>

void printSubset(int subset[], int size) {
int i;


    printf("{ ");
    for ( i = 0; i < size; i++) {
        printf("%d ", subset[i]);
    }
    printf("}\n");
}

void sumOfSubsetsUtil(int weights[], int targetSum, int n, int subset[], int subsetSize, int sum, int index) {
    // If the current sum equals the target sum, print the subset
int i;
    if (sum == targetSum) {
        printSubset(subset, subsetSize);
        return;
    }

    // Iterate through the remaining elements
    for ( i = index; i < n; i++) {
        // If adding the current element does not exceed the target sum
        if (sum + weights[i] <= targetSum) {
            // Include the current element in the subset
            subset[subsetSize] = weights[i];
	    // Recur with updated parameters
	    sumOfSubsetsUtil(weights, targetSum, n, subset, subsetSize + 1, sum + weights[i], i + 1);
	}
    }
}

void sumOfSubsets(int weights[], int targetSum, int n) {
    int subset[4]; // Array to store subsets
    sumOfSubsetsUtil(weights, targetSum, n, subset, 0, 0, 0);
}

int main() {
    int n, targetSum;
    int weights[4];

    // Input number of elements
    printf("Enter the number of elements: ");
    scanf("%d", &n);



    // Input elements
    printf("Enter the elements: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &weights[i]);
    }

    // Input target sum
    printf("Enter the target sum: ");
    scanf("%d", &targetSum);

    // Find and print all subsets that sum to the target value
    printf("Subsets with sum %d are:\n", targetSum);
    sumOfSubsets(weights, targetSum, n);

    return 0;
}